@page "/poc"
@using System.Windows
@using K0x.Benchy.DataStorage.Abstractions
@using K0x.Benchy.DataStorage.Abstractions.Models
@using Microsoft.Extensions.Configuration
@using Microsoft.Extensions.Logging
@using WpfBlazor.Components
@inject IBenchyFileLoader BenchyFileLoader
@inject IBenchyFileSaver BenchyFileSaver
@inject IConfiguration Configuration
@inject ILogger<PocPage> Logger

<h1>k0x Workbench - PoC</h1>

<p>appSetting1: @appSetting1</p>

<p>Path: @path</p>

<p>isPathExist: @isPathExist</p>

<button class="btn btn-primary" @onclick="OpenDirectory">Open Directory</button>

@if (bench != null)
{
    <BenchComponent Bench="bench" />
}
else {
    <p>Bench: null</p>
}

@code {



    private string appSetting1 = string.Empty;

    //private string path = "C:/_BkGit/bryanknox/k0x-workbench";
    private string path = "C:/Users/bryan/OneDrive/BK Shortcuts";

    private bool? isPathExist = null;

    private Bench? bench;

    protected override async Task OnInitializedAsync()
    {
        Logger.LogTrace("OnInitialized START.");

        Logger.LogTrace("OnInitialized trace.");
        Logger.LogDebug("OnInitialized debug.");
        Logger.LogInformation("OnInitialized information.");
        Logger.LogWarning("OnInitialized warning.");
        Logger.LogError("OnInitialized error.");
        Logger.LogCritical("OnInitialized critical.");

        appSetting1 = Configuration["AppSettings:Setting1"] ?? "Setting1 Not Found";
        CheckPathExistence();

        await CreateBenchFileIfNotExistAsync();

        bench = await LoadPocBenchAsync();
        Logger.LogDebug($"bench: {bench}");

        Logger.LogTrace("OnInitialized END.");
    }

    private void CheckPathExistence()
    {
        isPathExist = System.IO.Directory.Exists(path);
    }

    private void OpenDirectory()
    {
        if (isPathExist == true)
        {
            var psi = new System.Diagnostics.ProcessStartInfo
                {
                    FileName = path,
                    UseShellExecute = true
                };
            System.Diagnostics.Process.Start(psi);
        }
    }

    private async Task CreateBenchFileIfNotExistAsync()
    {
        try
        {
            var isExist = System.IO.File.Exists("poc-bench.json");
            if (!isExist)
            {
                var bench = new Bench
                {
                        Label = "PoC k0x-workbench Bench",
                    Trays = new List<Tray>
                    {
                        new Tray
                        {
                            Label = "Workspace",
                            Tools = new List<Tool>
                            {
                                new Tool { Label = "File Explorer", Command = "C:/_BkGit/bryanknox/k0x-workbench" },
                                new Tool { Label = "Tool 1.2", Command = "cmd2" }
                            }
                        },
                        new Tray
                        {
                            Label = "Tray 2",
                            Tools = new List<Tool>
                            {
                                new Tool { Label = "Tool 2.1", Command = "cmd3" },
                                new Tool { Label = "Tool 2.2", Command = "cmd4" }
                            }
                        }
                    }
                };
                await BenchyFileSaver.SaveAsync(bench, "poc-bench.json");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "CreateBenchFileIfNotExistAsync Error.");
        }
    }

    private async Task<Bench?> LoadPocBenchAsync()
    {
        try
        {
            var bench = await BenchyFileLoader.LoadAsync("poc-bench.json");
            return bench;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "LoadPocBenchAsync Error.");

            throw;
            //return null;
        }
    }
}
