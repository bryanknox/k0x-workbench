name: exe-vtag-release

on:
  workflow_dispatch: # Manual trigger.
  push:
    tags: ["v*"]
    branches: ["i28-exe-release-workflow"] # Temporary: for testing

# Security: Restrict default permissions
permissions:
  actions: read    # Required for ci-checks workflow
  checks: write    # Required for ci-checks workflow
  contents: read

env:
  CONFIGURATION: Release
  DOTNET_NOLOGO: true                     # Disable the .NET logo
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true # Disable the .NET first time experience
  DOTNET_CLI_TELEMETRY_OPTOUT: true       # Disable sending .NET CLI telemetry
  WPFBLAZOR_ARTIFACT_NAME: k0x-workbench-app
  WPFBLAZOR_CSPROJ_PATH: src/WpfBlazor/WpfBlazor.csproj
  DOTNET_VERSION: '9.0.x'
  TARGET_RUNTIME: win-x64

jobs:

  #ci-checks:
  #  name: CI Checks
  #  uses: ./.github/workflows/ci-checks.yml

  build-publish-wpfblazor-app-artifact:
    name: Build and publish WpfBlazor app artifact
    # needs: ci-checks
    runs-on: windows-2022
    timeout-minutes: 20
    steps:

      - name: ü§ò Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: üîß Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: üì¶ dotnet publish WpfBlazor app artifacts
        shell: pwsh
        run: |
          dotnet publish `
            $env:WPFBLAZOR_CSPROJ_PATH `
            --configuration $env:CONFIGURATION `
            --self-contained `
            --runtime $env:TARGET_RUNTIME `
            --output ${{ runner.temp }}/artifact-output `
            --verbosity minimal

      - name: üîí Generate internal checksums (for files inside zip)
        shell: pwsh
        run: |
          $artifactPath = "${{ runner.temp }}/artifact-output"
          Get-ChildItem -Path $artifactPath -File -Recurse | ForEach-Object {
            $hash = Get-FileHash -Path $_.FullName -Algorithm SHA256
            "$($hash.Hash)  $($_.Name)" | Out-File -FilePath "$artifactPath/checksums.txt" -Append -Encoding UTF8
          }
          Write-Host "Generated internal checksums (included in zip):"
          Get-Content "$artifactPath/checksums.txt"

      - name: üì¶ Create zip archive of WpfBlazor app
        shell: pwsh
        run: |
          $artifactPath = "${{ runner.temp }}/artifact-output"
          $zipPath = "${{ runner.temp }}/k0x-workbench-app.zip"
          Compress-Archive -Path "$artifactPath\*" -DestinationPath $zipPath -Force
          Write-Host "Created zip archive: $zipPath"

      - name: üîí Generate external checksums (for zip file)
        shell: pwsh
        run: |
          $zipPath = "${{ runner.temp }}/k0x-workbench-app.zip"
          $externalChecksumsPath = "${{ runner.temp }}/checksums.txt"
          $hash = Get-FileHash -Path $zipPath -Algorithm SHA256
          "$($hash.Hash)  $(Split-Path $zipPath -Leaf)" | Out-File -FilePath $externalChecksumsPath -Encoding UTF8
          Write-Host "Generated external checksums (for zip file):"
          Get-Content $externalChecksumsPath

      - name: üì§ Upload WpfBlazor app zip to Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.WPFBLAZOR_ARTIFACT_NAME }}-zip
          path: ${{ runner.temp }}/k0x-workbench-app.zip
          retention-days: 7

      - name: üì§ Upload checksums to Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: checksums
          path: ${{ runner.temp }}/checksums.txt
          retention-days: 7

  draft-release-wpfblazor-app:
    name: Create draft release for WpfBlazor app
    runs-on: ubuntu-latest
    needs: build-publish-wpfblazor-app-artifact
    timeout-minutes: 10
    permissions:
      contents: write
    # TODO: Remove the branch part of the condition after testing
    if: startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/i28-exe-release-workflow'
    steps:

      - name: ü§ò Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 0  # Needed for generating release notes

      - name: üì• Download zip artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.WPFBLAZOR_ARTIFACT_NAME }}-zip
          path: ${{ runner.temp }}/dist

      - name: üì• Download checksums artifact
        uses: actions/download-artifact@v4
        with:
          name: checksums
          path: ${{ runner.temp }}/dist

      - name: üîç Extract AssemblyName from WpfBlazor project file
        id: extract_exe_name
        shell: bash
        run: |
          # Read AssemblyName from the project file
          ASSEMBLY_NAME=$(grep -oP '<AssemblyName>\K[^<]+' ${{ env.WPFBLAZOR_CSPROJ_PATH }})
          echo "wpfblazor_exe_name=$ASSEMBLY_NAME" >> $GITHUB_OUTPUT
          echo "Extracted WpfBlazor exe name: $ASSEMBLY_NAME"

      - name: üìù Generate release notes
        id: release_notes
        shell: bash
        run: |
          # Extract version from tag
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

          # Get the executable name from the extracted AssemblyName
          EXE_NAME="${{ steps.extract_exe_name.outputs.wpfblazor_exe_name }}.exe"

          # Create release notes
          cat > release_notes.md << EOF
          ## K0x Workbench v$VERSION

          ### What's New
          This release includes the latest features and improvements for K0x Workbench.

          ### Download
          - **Windows (x64)**: Download the zip file from the assets below
          - **Checksums**: Two levels of SHA256 checksums are provided for security:
            - **checksums.txt**: Contains the checksum for the zip file itself
            - **Internal checksums**: The zip file contains a checksums.txt with hashes for all individual files

          ### Verification
          1. Download both the zip file and checksums.txt
          2. Verify the zip file integrity: \`Get-FileHash k0x-workbench-app.zip -Algorithm SHA256\`
          3. Compare with the hash in checksums.txt
          4. After extraction, verify individual files using the checksums.txt inside the zip

          ### Installation
          1. Download and verify the zip file (see Verification above)
          2. Extract the zip file to your desired location
          3. Run $EXE_NAME to start the application

          ### System Requirements
          - Windows 10 version 1809 or later
          - .NET 9.0 Runtime (included in self-contained build)
          EOF

          echo "Generated release notes"

      - name: üöÄ Create draft release
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          generate_release_notes: true
          fail_on_unmatched_files: true
          name: K0x Workbench v${{ steps.release_notes.outputs.version }}
          tag_name: ${{ github.ref_name }}
          body_path: release_notes.md
          files: |
            ${{ runner.temp }}/dist/*
